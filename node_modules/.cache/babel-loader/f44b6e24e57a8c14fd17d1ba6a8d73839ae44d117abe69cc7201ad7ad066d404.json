{"ast":null,"code":"var _jsxFileName = \"/home/alex/WebstormProjects/password/src/components/PasswordsPage.js\",\n  _s = $RefreshSig$();\n// PasswordListPage.js\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PopupForm from './PopupForm'; // Import du composant PopupForm\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PasswordListPage() {\n  _s();\n  const [passwords, setPasswords] = useState([]);\n  const [isFormOpen, setIsFormOpen] = useState(false); // Ajout de l'état pour gérer l'ouverture/fermeture du popup form\n  const [editedPasswordId, setEditedPasswordId] = useState(null); // Nouvel état pour stocker l'ID du mot de passe en cours d'édition\n\n  useEffect(() => {\n    fetch('http://localhost:3001/passwords', {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch passwords');\n      }\n      return response.json();\n    }).then(data => {\n      setPasswords(data);\n    }).catch(error => {\n      console.error('Error fetching passwords:', error);\n    });\n  }, []);\n  const handleDeletePassword = async passwordId => {\n    try {\n      const response = await fetch(`http://localhost:3001/passwords/${passwordId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (response.ok) {\n        const updatedPasswords = passwords.filter(password => password.id !== passwordId);\n        setPasswords(updatedPasswords);\n      } else {\n        const data = await response.json();\n        console.error('Erreur lors de la suppression du mot de passe :', data.error);\n      }\n    } catch (error) {\n      console.error('Erreur lors de la suppression du mot de passe :', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Liste des mots de passe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"open-button\",\n      onClick: () => setIsFormOpen(true),\n      children: \"Ajouter un mot de passe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Liste des mots de passe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: passwords.map(password => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: password.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this), \": \", password.password, \" - \", /*#__PURE__*/_jsxDEV(\"em\", {\n          children: password.website\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 85\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeletePassword(password.id),\n          children: \"Supprimer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"open-button-2\",\n          onClick: () => {\n            setIsFormOpen(true);\n            setEditedPasswordId(password.id); // Mettre à jour l'ID du mot de passe en cours d'édition\n          },\n          children: \"Modifier\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this), editedPasswordId === password.id && /*#__PURE__*/_jsxDEV(PopupForm, {\n          // Ajouter une clé unique pour chaque PopupForm\n          isOpen: isFormOpen,\n          onClose: () => setIsFormOpen(false),\n          onSubmit: () => handleEditPassword(password.id, newPasswordUsername, newPasswordPassword, newPasswordWebsite),\n          initialValues: {\n            // Passer les valeurs initiales pour le formulaire de modification\n            newPasswordUsername: password.username,\n            newPasswordPassword: password.password,\n            newPasswordWebsite: password.website\n          }\n          // Passer les fonctions de mise à jour de l'état\n          ,\n          setUsername: value => setNewPasswordUsername(value),\n          setPassword: value => setNewPasswordPassword(value),\n          setWebsite: value => setNewPasswordWebsite(value),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Modifier le mot de passe\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Nom d'utilisateur\",\n              value: newPasswordUsername,\n              onChange: e => setNewPasswordUsername(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Mot de passe\",\n              value: newPasswordPassword,\n              onChange: e => setNewPasswordPassword(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Site web\",\n              value: newPasswordWebsite,\n              onChange: e => setNewPasswordWebsite(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 33\n          }, this)\n        }, password.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 29\n        }, this)]\n      }, password.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/dashboard\",\n      children: \"Retour au tableau de bord\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n_s(PasswordListPage, \"7zbGt5nMzV/eQiT7o1aYbL4OQOQ=\");\n_c = PasswordListPage;\nexport default PasswordListPage;\nvar _c;\n$RefreshReg$(_c, \"PasswordListPage\");","map":{"version":3,"names":["React","useState","useEffect","Link","PopupForm","jsxDEV","_jsxDEV","PasswordListPage","_s","passwords","setPasswords","isFormOpen","setIsFormOpen","editedPasswordId","setEditedPasswordId","fetch","headers","localStorage","getItem","then","response","ok","Error","json","data","catch","error","console","handleDeletePassword","passwordId","method","updatedPasswords","filter","password","id","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","username","website","isOpen","onClose","onSubmit","handleEditPassword","newPasswordUsername","newPasswordPassword","newPasswordWebsite","initialValues","setUsername","value","setNewPasswordUsername","setPassword","setNewPasswordPassword","setWebsite","setNewPasswordWebsite","type","placeholder","onChange","e","target","to","_c","$RefreshReg$"],"sources":["/home/alex/WebstormProjects/password/src/components/PasswordsPage.js"],"sourcesContent":["// PasswordListPage.js\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PopupForm from './PopupForm'; // Import du composant PopupForm\n\nfunction PasswordListPage() {\n    const [passwords, setPasswords] = useState([]);\n    const [isFormOpen, setIsFormOpen] = useState(false); // Ajout de l'état pour gérer l'ouverture/fermeture du popup form\n    const [editedPasswordId, setEditedPasswordId] = useState(null); // Nouvel état pour stocker l'ID du mot de passe en cours d'édition\n\n    useEffect(() => {\n        fetch('http://localhost:3001/passwords', {\n            headers: {\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\n            }\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Failed to fetch passwords');\n                }\n                return response.json();\n            })\n            .then(data => {\n                setPasswords(data);\n            })\n            .catch(error => {\n                console.error('Error fetching passwords:', error);\n            });\n    }, []);\n\n    const handleDeletePassword = async (passwordId) => {\n        try {\n            const response = await fetch(`http://localhost:3001/passwords/${passwordId}`, {\n                method: 'DELETE',\n                headers: {\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\n                },\n            });\n            if (response.ok) {\n                const updatedPasswords = passwords.filter(password => password.id !== passwordId);\n                setPasswords(updatedPasswords);\n            } else {\n                const data = await response.json();\n                console.error('Erreur lors de la suppression du mot de passe :', data.error);\n            }\n        } catch (error) {\n            console.error('Erreur lors de la suppression du mot de passe :', error);\n        }\n    };\n\n    return (\n        <div>\n            <h2>Liste des mots de passe</h2>\n            {/* Bouton pour ouvrir le formulaire d'ajout */}\n            <button className=\"open-button\" onClick={() => setIsFormOpen(true)}>Ajouter un mot de passe</button>\n            {/* Liste des mots de passe */}\n            <h3>Liste des mots de passe</h3>\n            <ul>\n                {passwords.map(password => (\n                    <li key={password.id}>\n                        <strong>{password.username}</strong>: {password.password} - <em>{password.website}</em>\n                        {/* Bouton pour supprimer le mot de passe */}\n                        <button onClick={() => handleDeletePassword(password.id)}>Supprimer</button>\n                        {/* Bouton pour ouvrir le formulaire de modification */}\n                        <button className=\"open-button-2\" onClick={() => {\n                            setIsFormOpen(true);\n                            setEditedPasswordId(password.id); // Mettre à jour l'ID du mot de passe en cours d'édition\n                        }}>Modifier</button>\n                        {/* Popup Form avec le formulaire pour modifier un mot de passe */}\n                        {editedPasswordId === password.id && (\n                            <PopupForm\n                                key={password.id} // Ajouter une clé unique pour chaque PopupForm\n                                isOpen={isFormOpen}\n                                onClose={() => setIsFormOpen(false)}\n                                onSubmit={() => handleEditPassword(password.id, newPasswordUsername, newPasswordPassword, newPasswordWebsite)}\n                                initialValues={{ // Passer les valeurs initiales pour le formulaire de modification\n                                    newPasswordUsername: password.username,\n                                    newPasswordPassword: password.password,\n                                    newPasswordWebsite: password.website\n                                }}\n                                // Passer les fonctions de mise à jour de l'état\n                                setUsername={(value) => setNewPasswordUsername(value)}\n                                setPassword={(value) => setNewPasswordPassword(value)}\n                                setWebsite={(value) => setNewPasswordWebsite(value)}\n                            >\n                                <div>\n                                    <h3>Modifier le mot de passe</h3>\n                                    <input type=\"text\" placeholder=\"Nom d'utilisateur\" value={newPasswordUsername} onChange={(e) => setNewPasswordUsername(e.target.value)} />\n                                    <input type=\"text\" placeholder=\"Mot de passe\" value={newPasswordPassword} onChange={(e) => setNewPasswordPassword(e.target.value)} />\n                                    <input type=\"text\" placeholder=\"Site web\" value={newPasswordWebsite} onChange={(e) => setNewPasswordWebsite(e.target.value)} />\n                                </div>\n                            </PopupForm>\n                        )}\n                    </li>\n                ))}\n            </ul>\n            <Link to=\"/dashboard\">Retour au tableau de bord</Link>\n        </div>\n    );\n}\n\nexport default PasswordListPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}