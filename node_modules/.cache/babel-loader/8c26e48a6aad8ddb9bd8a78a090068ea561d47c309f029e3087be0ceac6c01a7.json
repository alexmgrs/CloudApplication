{"ast":null,"code":"var _jsxFileName = \"/home/alex/WebstormProjects/password/src/components/PasswordsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PopupForm from './PopupForm'; // Import du composant PopupForm\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PasswordListPage() {\n  _s();\n  const [newPasswordUsername, setNewPasswordUsername] = useState('');\n  const [newPasswordPassword, setNewPasswordPassword] = useState('');\n  const [newPasswordWebsite, setNewPasswordWebsite] = useState('');\n  const [generateStrongPassword, setGenerateStrongPassword] = useState(false);\n  const [passwordLength, setPasswordLength] = useState(12);\n  const [includeNumbers, setIncludeNumbers] = useState(false);\n  const [includeSpecialChars, setIncludeSpecialChars] = useState(false);\n  const [passwords, setPasswords] = useState([]);\n  const [isAddFormOpen, setIsAddFormOpen] = useState(false); // Ajout de l'état pour gérer l'ouverture/fermeture du formulaire d'ajout\n  const [isEditFormOpen, setIsEditFormOpen] = useState(false); // Ajout de l'état pour gérer l'ouverture/fermeture du formulaire de modification\n  const [selectedPassword, setSelectedPassword] = useState(null); // Ajout de l'état pour stocker le mot de passe sélectionné pour l'édition\n\n  useEffect(() => {\n    fetch('http://localhost:3001/passwords', {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch passwords');\n      }\n      return response.json();\n    }).then(data => {\n      setPasswords(data);\n    }).catch(error => {\n      console.error('Error fetching passwords:', error);\n    });\n  }, []);\n  const handleAddPassword = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/passwords', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          generateStrongPassword: generateStrongPassword,\n          passwordLength: passwordLength,\n          includeNumbers: includeNumbers,\n          includeSpecialChars: includeSpecialChars,\n          username: newPasswordUsername,\n          password: newPasswordPassword,\n          website: newPasswordWebsite\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setPasswords([...passwords, data.newPassword]);\n        setNewPasswordUsername('');\n        setNewPasswordPassword('');\n        setNewPasswordWebsite('');\n        setGenerateStrongPassword(false);\n        setPasswordLength(12);\n        setIncludeNumbers(false);\n        setIncludeSpecialChars(false);\n        setIsAddFormOpen(false);\n      } else {\n        console.error('Erreur lors de l\\'ajout du mot de passe :', data.error);\n      }\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du mot de passe :', error);\n    }\n  };\n  const handleEditPassword = async () => {\n    if (!selectedPassword) return;\n    const {\n      id,\n      username,\n      password,\n      website\n    } = selectedPassword;\n    try {\n      const response = await fetch(`http://localhost:3001/passwords/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          useStrongPassword: false,\n          username: username,\n          password: password,\n          website: website\n        })\n      });\n      if (response.ok) {\n        const updatedPasswords = passwords.map(p => {\n          if (p.id === id) {\n            return {\n              ...p,\n              username: username,\n              password: password,\n              website: website\n            };\n          }\n          return p;\n        });\n        setPasswords(updatedPasswords);\n        setIsEditFormOpen(false);\n      } else {\n        const data = await response.json();\n        console.error('Erreur lors de la modification du mot de passe :', data.error);\n      }\n    } catch (error) {\n      console.error('Erreur lors de la modification du mot de passe :', error);\n    }\n  };\n  const handleDeletePassword = async passwordId => {\n    try {\n      const response = await fetch(`http://localhost:3001/passwords/${passwordId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (response.ok) {\n        const updatedPasswords = passwords.filter(password => password.id !== passwordId);\n        setPasswords(updatedPasswords);\n      } else {\n        const data = await response.json();\n        console.error('Erreur lors de la suppression du mot de passe :', data.error);\n      }\n    } catch (error) {\n      console.error('Erreur lors de la suppression du mot de passe :', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Liste des mots de passe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"open-button\",\n      onClick: () => setIsAddFormOpen(true),\n      children: \"Ajouter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PopupForm, {\n      isOpen: isAddFormOpen,\n      onClose: () => setIsAddFormOpen(false),\n      onSubmit: handleAddPassword,\n      initialValues: {\n        newPasswordUsername,\n        newPasswordPassword,\n        newPasswordWebsite\n      },\n      setUsername: setNewPasswordUsername,\n      setPassword: setNewPasswordPassword,\n      setWebsite: setNewPasswordWebsite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Liste des mots de passe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: passwords.map(password => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: password.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 25\n        }, this), \": \", password.password, \" - \", /*#__PURE__*/_jsxDEV(\"em\", {\n          children: password.website\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 85\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeletePassword(password.id),\n          children: \"Supprimer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"open-button-2\",\n          onClick: () => {\n            setSelectedPassword(password);\n            setIsEditFormOpen(true);\n          },\n          children: \"Modifier\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this)]\n      }, password.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PopupForm, {\n      isOpen: isEditFormOpen,\n      onClose: () => setIsEditFormOpen(false),\n      onSubmit: handleEditPassword,\n      initialValues: selectedPassword,\n      setUsername: value => setSelectedPassword(prevState => ({\n        ...prevState,\n        username: value\n      })),\n      setPassword: value => setSelectedPassword(prevState => ({\n        ...prevState,\n        password: value\n      })),\n      setWebsite: value => setSelectedPassword(prevState => ({\n        ...prevState,\n        website: value\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/dashboard\",\n      children: \"Retour au tableau de bord\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this);\n}\n_s(PasswordListPage, \"V2Jq3OEGhMVItnIH59hq3fDLBvw=\");\n_c = PasswordListPage;\nexport default PasswordListPage;\nvar _c;\n$RefreshReg$(_c, \"PasswordListPage\");","map":{"version":3,"names":["React","useState","useEffect","Link","PopupForm","jsxDEV","_jsxDEV","PasswordListPage","_s","newPasswordUsername","setNewPasswordUsername","newPasswordPassword","setNewPasswordPassword","newPasswordWebsite","setNewPasswordWebsite","generateStrongPassword","setGenerateStrongPassword","passwordLength","setPasswordLength","includeNumbers","setIncludeNumbers","includeSpecialChars","setIncludeSpecialChars","passwords","setPasswords","isAddFormOpen","setIsAddFormOpen","isEditFormOpen","setIsEditFormOpen","selectedPassword","setSelectedPassword","fetch","headers","localStorage","getItem","then","response","ok","Error","json","data","catch","error","console","handleAddPassword","method","body","JSON","stringify","username","password","website","newPassword","handleEditPassword","id","useStrongPassword","updatedPasswords","map","p","handleDeletePassword","passwordId","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","isOpen","onClose","onSubmit","initialValues","setUsername","setPassword","setWebsite","value","prevState","to","_c","$RefreshReg$"],"sources":["/home/alex/WebstormProjects/password/src/components/PasswordsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PopupForm from './PopupForm'; // Import du composant PopupForm\n\nfunction PasswordListPage() {\n    const [newPasswordUsername, setNewPasswordUsername] = useState('');\n    const [newPasswordPassword, setNewPasswordPassword] = useState('');\n    const [newPasswordWebsite, setNewPasswordWebsite] = useState('');\n    const [generateStrongPassword, setGenerateStrongPassword] = useState(false);\n    const [passwordLength, setPasswordLength] = useState(12);\n    const [includeNumbers, setIncludeNumbers] = useState(false);\n    const [includeSpecialChars, setIncludeSpecialChars] = useState(false);\n    const [passwords, setPasswords] = useState([]);\n    const [isAddFormOpen, setIsAddFormOpen] = useState(false); // Ajout de l'état pour gérer l'ouverture/fermeture du formulaire d'ajout\n    const [isEditFormOpen, setIsEditFormOpen] = useState(false); // Ajout de l'état pour gérer l'ouverture/fermeture du formulaire de modification\n    const [selectedPassword, setSelectedPassword] = useState(null); // Ajout de l'état pour stocker le mot de passe sélectionné pour l'édition\n\n    useEffect(() => {\n        fetch('http://localhost:3001/passwords', {\n            headers: {\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\n            }\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Failed to fetch passwords');\n                }\n                return response.json();\n            })\n            .then(data => {\n                setPasswords(data);\n            })\n            .catch(error => {\n                console.error('Error fetching passwords:', error);\n            });\n    }, []);\n\n    const handleAddPassword = async () => {\n        try {\n            const response = await fetch('http://localhost:3001/passwords', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\n                },\n                body: JSON.stringify({\n                    generateStrongPassword: generateStrongPassword,\n                    passwordLength: passwordLength,\n                    includeNumbers: includeNumbers,\n                    includeSpecialChars: includeSpecialChars,\n                    username: newPasswordUsername,\n                    password: newPasswordPassword,\n                    website: newPasswordWebsite\n                }),\n            });\n            const data = await response.json();\n            if (response.ok) {\n                setPasswords([...passwords, data.newPassword]);\n                setNewPasswordUsername('');\n                setNewPasswordPassword('');\n                setNewPasswordWebsite('');\n                setGenerateStrongPassword(false);\n                setPasswordLength(12);\n                setIncludeNumbers(false);\n                setIncludeSpecialChars(false);\n                setIsAddFormOpen(false);\n            } else {\n                console.error('Erreur lors de l\\'ajout du mot de passe :', data.error);\n            }\n        } catch (error) {\n            console.error('Erreur lors de l\\'ajout du mot de passe :', error);\n        }\n    };\n\n    const handleEditPassword = async () => {\n        if (!selectedPassword) return;\n\n        const { id, username, password, website } = selectedPassword;\n\n        try {\n            const response = await fetch(`http://localhost:3001/passwords/${id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\n                },\n                body: JSON.stringify({\n                    useStrongPassword: false,\n                    username: username,\n                    password: password,\n                    website: website\n                }),\n            });\n            if (response.ok) {\n                const updatedPasswords = passwords.map(p => {\n                    if (p.id === id) {\n                        return {\n                            ...p,\n                            username: username,\n                            password: password,\n                            website: website\n                        };\n                    }\n                    return p;\n                });\n                setPasswords(updatedPasswords);\n                setIsEditFormOpen(false);\n            } else {\n                const data = await response.json();\n                console.error('Erreur lors de la modification du mot de passe :', data.error);\n            }\n        } catch (error) {\n            console.error('Erreur lors de la modification du mot de passe :', error);\n        }\n    };\n\n    const handleDeletePassword = async (passwordId) => {\n        try {\n            const response = await fetch(`http://localhost:3001/passwords/${passwordId}`, {\n                method: 'DELETE',\n                headers: {\n                    'Authorization': `Bearer ${localStorage.getItem('token')}`\n                },\n            });\n            if (response.ok) {\n                const updatedPasswords = passwords.filter(password => password.id !== passwordId);\n                setPasswords(updatedPasswords);\n            } else {\n                const data = await response.json();\n                console.error('Erreur lors de la suppression du mot de passe :', data.error);\n            }\n        } catch (error) {\n            console.error('Erreur lors de la suppression du mot de passe :', error);\n        }\n    };\n\n    return (\n        <div>\n            <h2>Liste des mots de passe</h2>\n            {/* Bouton pour ouvrir le formulaire d'ajout */}\n            <button className=\"open-button\" onClick={() => setIsAddFormOpen(true)}>Ajouter</button>\n            {/* Formulaire pour ajouter un mot de passe */}\n            <PopupForm\n                isOpen={isAddFormOpen}\n                onClose={() => setIsAddFormOpen(false)}\n                onSubmit={handleAddPassword}\n                initialValues={{ newPasswordUsername, newPasswordPassword, newPasswordWebsite }}\n                setUsername={setNewPasswordUsername}\n                setPassword={setNewPasswordPassword}\n                setWebsite={setNewPasswordWebsite}\n            />\n            {/* Liste des mots de passe existants */}\n            <h3>Liste des mots de passe</h3>\n            <ul>\n                {passwords.map(password => (\n                    <li key={password.id}>\n                        <strong>{password.username}</strong>: {password.password} - <em>{password.website}</em>\n                        <button onClick={() => handleDeletePassword(password.id)}>Supprimer</button>\n                        <button className=\"open-button-2\" onClick={() => { setSelectedPassword(password); setIsEditFormOpen(true); }}>Modifier</button>\n                    </li>\n                ))}\n            </ul>\n            {/* Formulaire pour modifier un mot de passe */}\n            <PopupForm\n                isOpen={isEditFormOpen}\n                onClose={() => setIsEditFormOpen(false)}\n                onSubmit={handleEditPassword}\n                initialValues={selectedPassword}\n                setUsername={value => setSelectedPassword(prevState => ({ ...prevState, username: value }))}\n                setPassword={value => setSelectedPassword(prevState => ({ ...prevState, password: value }))}\n                setWebsite={value => setSelectedPassword(prevState => ({ ...prevState, website: value }))}\n            />\n            <Link to=\"/dashboard\">Retour au tableau de bord</Link>\n        </div>\n    );\n}\n\nexport default PasswordListPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}